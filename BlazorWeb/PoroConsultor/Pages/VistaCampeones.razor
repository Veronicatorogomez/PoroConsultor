@page "/campeones"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (campeones == null)
{
	<div id="app">
		<svg class="loading-progress">
			<circle r="20%" cx="30%" cy="50%" />
			<circle r="20%" cx="30%" cy="50%" />
		</svg>
	</div>
}
else
{
	<input id="buscador" type="text" placeholder="Buscar..." @bind="@terminoBusqueda" @oninput="Buscar" />

	@if (orden)
	{
		<input id="desciende" type="checkbox" @bind="orden" />
		<label for="desciende"><img class="orden" src="/Recursos/imagenes/asciende.png" /></label>
	}
	else
	{
		<input id="asciende" type="checkbox" @bind="orden" />
		<label for="asciende"><img class="orden" src="/Recursos/imagenes/desciende.png" /></label>
	}

	<div class="container">


		@if (resultadosBusqueda.Count > 0 && terminoBusqueda != "" || terminoBusquedaBool)
		{
			@foreach (var campeon in resultadosBusqueda)
			{
				<button class="item">
					<img class="img" src="@campeon.ImagenPrincipal">
					<p>@campeon.Nombre</p>
				</button>
			}
		}
		else
		{
			@if (orden)
			{
				@foreach (var campeon in campeonesPaginadosAlreves)
				{
					<button class="item">
						<img class="img" src="@campeon.ImagenPrincipal">
						<p>@campeon.Nombre</p>
					</button>
				}
			}
			else
			{
				@foreach (var campeon in campeonesPaginados)
				{
					<button class="item">
						<img class="img" src="@campeon.ImagenPrincipal">
						<p>@campeon.Nombre</p>
					</button>
				}
			}
		}

	</div>
	@if (!terminoBusquedaBool)
	{
		<div class="paginado">
			<button class="botonPaginado" @onclick="IrPaginaAnterior">Anterior</button>
			<p class="botonPaginado">@numeroPagina</p>
			<button class="botonPaginado" @onclick="IrPaginaSiguiente">Siguiente</button>
		</div>
	}
}

@code {
	List<Campeones> campeonesPaginados = new List<Campeones>();
	List<Campeones> campeonesPaginadosAlreves = new List<Campeones>();
	int numeroPagina = 1;
	int elementosPorPagina = 50;

	private bool orden;
	private List<Campeones> campeonesAlreves = new List<Campeones>();
	private List<Campeones> campeones;

	private string terminoBusqueda = "";
	private bool terminoBusquedaBool;
	List<Campeones> resultadosBusqueda = new List<Campeones>();

	protected override async Task OnInitializedAsync()
	{
		campeones = await Http.GetFromJsonAsync<List<Campeones>>("apis/campeones.json");

		await PaginarCampeones();
		await CrearListaAlreves();
		await PaginarCampeonesAlreves();
	}

	private async Task ScrollToTop()
	{
		await JSRuntime.InvokeVoidAsync("scrollToTop");
	}

	private Task Buscar(ChangeEventArgs e)
	{
		terminoBusqueda = e.Value.ToString();
		resultadosBusqueda = campeones.Where(campeon => campeon.Nombre.Contains(terminoBusqueda, StringComparison.OrdinalIgnoreCase)).ToList();
		if (terminoBusqueda != "")
		{
			terminoBusquedaBool = true;
		}
		else
		{
			terminoBusquedaBool = false;
		}
		return Task.CompletedTask;
	}

	private Task CrearListaAlreves()
	{
		for (int i = campeones.Count - 1; i >= 0; i--)
		{
			campeonesAlreves.Add(campeones[i]);
		}

		return Task.CompletedTask;
	}
	private Task PaginarCampeones()
	{
		campeonesPaginados = campeones.Skip((numeroPagina - 1) * elementosPorPagina).Take(elementosPorPagina).ToList();
		return Task.CompletedTask;
	}
	private Task PaginarCampeonesAlreves()
	{
		campeonesPaginadosAlreves = campeonesAlreves.Skip((numeroPagina - 1) * elementosPorPagina).Take(elementosPorPagina).ToList();
		return Task.CompletedTask;
	}

	private void IrPaginaAnterior()
	{
		if (numeroPagina != 1)
		{
			numeroPagina--;
			PaginarCampeones();
			PaginarCampeonesAlreves();
		}
		ScrollToTop();
	}

	private void IrPaginaSiguiente()
	{
		if (numeroPagina != 4)
		{
			numeroPagina++;
			PaginarCampeones();
			PaginarCampeonesAlreves();
		}
		ScrollToTop();
	}

}
