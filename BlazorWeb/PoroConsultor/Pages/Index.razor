@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>PoroConsultor</PageTitle>

<img id="logoPrincipal" src="/Recursos/imagenes/logo.png" />
<div class="contenedorDeTodo">
    <div id="alerta">
                                BIENVENIDOS!!!!!!!<br />
        Esta página web contiene elementos musicales.
        <button id="alertaBoton" @onclick="CerrarAlerta">X</button>
    </div>
    <video class="video" autoplay loop >
        <source src="@video" type="video/mp4" />
	</video>
    <button id="botonDeSonido" @onclick="QuitarSonido">
        @if (!audio)
        {
            <img class="imagenSonido" src="/Recursos/imagenes/on.png" />
        }
        else
        {
            <img class="imagenSonido" src="/Recursos/imagenes/mute.png" />
        }

    </button>
    <div class="contenedorTexto">
        <div class="texto imagen">
		    Nuestra finalidad es brindar una información detallada sobre los campeones de League of Legends y poder consultar cual se adapta mejor
		    a tu modo de juego, compara cuál es mejor según las características que especifíques y un ranking actualizable.
	    </div>
    </div>
    <button class="contenedor" @onclick="Redirigir1">
        <img class="imagen" src="/Recursos/imagenes/Img1.png" />
        </button>
    <button class="contenedor" @onclick="Redirigir2">
        <img class="imagen" src="/Recursos/imagenes/Img2.png" />
    </button>
    <button class="contenedor" @onclick="Redirigir3">
        <img class="imagen" src="/Recursos/imagenes/Img3.png" />
    </button>
    <div class="contenedorTexto">
        <div class="texto imagen">
            Los datos han sido obtenidos de la página oficial de <a href="https://www.leagueoflegends.com/es-es/">League of Legends</a> y de <a href="https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics">LeagueofLegends.Fandom</a>.
        </div>
    </div>
</div>

@if (easterEgg)
{
    @foreach (var poro in poritos)
    {
        Random random = new Random();
        <img class="poro" style="top:@(random.Next(10,100))%; left:@(random.Next(5,95))%;" src="/Recursos/poros/@poro" @onmouseover="QuitarPoro" />
    }
}

@code {
    private bool easterEgg;
    private const int NUMERO_POROS = 10;
    private string video = "./Recursos/video/videoLol.mp4";
    private IJSObjectReference module;
    private bool audio;
    private string[] poritos = new string[NUMERO_POROS];

    protected override async Task OnInitializedAsync()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Index.js");
        await module.InvokeVoidAsync("cargarAlerta");
        await module.InvokeVoidAsync("checkScroll");
        Random random = new Random();
        for (int i = 0; i < poritos.Length; i++)
        {
            poritos[i] = random.Next(1, 17).ToString() + ".png";
        }
    }

    public void Redirigir1()
    {
        NavigationManager.NavigateTo("/campeones");
    }
    public void Redirigir2()
    {
        NavigationManager.NavigateTo("/Consultor");
    }
    public void Redirigir3()
    {
        NavigationManager.NavigateTo("/Ranking");
    }
    protected override async Task OnParametersSetAsync()
    {
        easterEgg = await ObtenerValorBooleano();
        await base.OnParametersSetAsync();
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Index.js");
            
    //    }
       
    //}

    //protected override async Task OnParametersSetAsync()
    //{
    //    //module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Index.js");
    //    //await module.InvokeVoidAsync("checkScroll");
    //    await base.OnParametersSetAsync();

    //}
    private void QuitarPoro()
    {

    }

    public async Task CerrarAlerta()
    {
        await module.InvokeVoidAsync("cerrarAlerta");
    }

    public async Task QuitarSonido()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Index.js");
        await module.InvokeVoidAsync("quitarSonido");
        if (audio)
        {
            audio = false;
        }
        else
        {
            audio = true;
        }
    }
    private async Task<bool> ObtenerValorBooleano()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Index.js");
        return await module.InvokeAsync<bool>("existeEasteregg");
    }
}
 
