@page "/campeon/{parametro}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if (campeon != null)
{
	<h1 class="mostrarDerecha">@campeon.Nombre</h1>
	<h2 class="mostrarDerecha">@campeon.Apodo</h2>

	<div class="gridContainer">

		<img class="imagenPrincipal mostrarDerecha" src="@campeon.ImagenSkin[0]">

		
			<div class="imagenRolDificultad">
			<p class="roll mostrarDerecha"><span class="whiteText">ROLL:</span><br>@campeon.Rol</p>
			<p class="dificultad mostrarDerecha"><span class="whiteText">DIFICULTAD:</span><br>@campeon.Dificultad</p>
			<p class="descripcion mostrarDerecha">@campeon.Descripcion</p>
			</div>
		

		<div class="habilidades">

			<div class="iconosHabilidades">
				@for (int i = 0; i < campeon.ImagenHabilidad.Count; i++)
				{
					int numero = i;
					<button class="botonImagenHabilidad animacion" @onclick="() => DameNum(numero,campeon.VideoHabilidad[habilidad])"><img class="imagenHabilidad" src="@campeon.ImagenHabilidad[i]"></button>

				}

			</div>

			<div class="infoHabilidades animacion">
				<p class="nombreHabilidad">@campeon.NombreHabilidad[habilidad]</p>
				<p class="tipoHabilidad">@campeon.TipoHabilidad[habilidad]</p>
				<p>@campeon.DescripcionHabilidad[habilidad]</p>
			</div>


		</div>


		<video style="background-image:url('./Recursos/poros/@fondoVideo')" class="video animacion" autoplay loop>
			<source class="srcVideo" src="@campeon.VideoHabilidad[habilidad]">
		</video>


	</div>


	<div class="skinGridContainer">
		@for (int i = 0; i < campeon.IconoSkin.Count; i++)
		{
			int numerito = i;
			<button class="botonesIconosSkins animacion" @onclick="() => DameNumSkin(numerito)"><img class="iconosSkins" src="@campeon.IconoSkin[i]"></button>
		}
	</div>

	<h1 class="animacion">@campeon.NombreSkin[skin]</h1>
	<img class="imagenSkin animacion" src="@campeon.ImagenSkin[skin]">
}
else
{
	<div id="app">
		<svg class="loading-progress">
			<circle r="40%" cx="50%" cy="50%" />
			<circle r="40%" cx="50%" cy="50%" />
		</svg>
	</div>
}

@if (easterEgg)
{
	@foreach (var poro in poritos)
	{
		Random random = new Random();
		<img class="poro" style="top:@(random.Next(10,100))%; left:@(random.Next(5,95))%;" src="/Recursos/poros/@poro" @onmouseover="QuitarPoro" />
	}
}

@code {
	[Parameter]
	public string parametro { get; set; }
	private const int NUMERO_POROS = 3;
	private List<Estadisticas> campeonesStats;
	private List<Campeones> campeonesInfo;
	private List<Union> campeones = new List<Union>();
	private Union campeon;
	private IJSObjectReference jsModule;
	private int habilidad = 0;
	private int skin = 0;
	private string[] poritos = new string[NUMERO_POROS];
	private string fondoVideo;
	private bool easterEgg;

	protected override async Task OnInitializedAsync()
	{
		campeonesStats = await Http.GetFromJsonAsync<List<Estadisticas>>("apis/estadisticas.json");

		campeonesInfo = await Http.GetFromJsonAsync<List<Campeones>>("apis/campeones.json");

		foreach (var item in campeonesInfo)
		{
			foreach (var item2 in campeonesStats)
			{
				if (item.Nombre == item2.Nombre.TrimStart(' ').ToUpper())
				{
					campeones.Add(new Union(item, item2));
				}
			}
		}
		jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Campeon.js");
		await jsModule.InvokeVoidAsync("checkScroll");
		campeon = campeones.First(x => x.Nombre == parametro);
		Random random = new Random();
		fondoVideo = random.Next(1, 17).ToString() + ".png";

		for (int i = 0; i < poritos.Length; i++)
		{
			poritos[i] = random.Next(1, 17).ToString() + ".png";
		}

	}

	protected override async Task OnParametersSetAsync()
	{
		jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Campeon.js");
		await jsModule.InvokeVoidAsync("muteVideo");
		easterEgg = await ObtenerValorBooleano();
		await base.OnParametersSetAsync();
	}

	private async Task DameNum(int i, string video)
	{
		habilidad = i;
		await jsModule.InvokeVoidAsync("loadAnotherVideo", video);
	}

	private void DameNumSkin(int i)
	{
		skin = i;
	}

	private async Task<bool> ObtenerValorBooleano()
	{
		jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Campeon.js");
		return await jsModule.InvokeAsync<bool>("existeEasteregg");
	}

	private async Task VideoBucle()
	{
		jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Campeon.js");
		await jsModule.InvokeVoidAsync("playVideoBucle");
	}
}
