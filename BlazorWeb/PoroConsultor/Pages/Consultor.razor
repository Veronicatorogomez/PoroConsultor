@page "/consultor"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Consultor</PageTitle>
@if (campeones.Count > 0)
{
	<div class="contenedorSelects">
		<select id="selector1" @bind="nombre1">
			@foreach (var campeon in campeones)
			{
				<option>@campeon.Nombre</option>
			}
		</select>

		<select id="selector2" @bind="nombre2">
			@foreach (var campeon in campeones)
			{
				<option>@campeon.Nombre</option>
			}
		</select>
	</div>
	<button id="boton" @onclick="AnalizarDatos">
		<img class="vsImagen" src="/Recursos/imagenes/vs.png" />
	</button>

	@if (vs)
	{
		<div class="contenedorImagenesYNombres">
			<img class="imagenesConsultor" src="@campeon1.ImagenSkin[0]" />
			<img class="imagenesConsultor" src="@campeon2.ImagenSkin[0]" />
			<p class="nombresConsultor">
				@campeon1.Nombre
			</p>
			<p class="nombresConsultor">
				@campeon2.Nombre
			</p>
		</div>
		<div class="contenedorDatos">
			<div class="datosCampeon">
				<p class="dato" @ref="vida1">@campeon1.Vida</p>
				<p class="dato" @ref="mana1">@campeon1.Mana</p>
				<p class="dato" @ref="dano1">@campeon1.Dano</p>
				<p class="dato" @ref="armadura1">@campeon1.Armadura</p>
				<p class="dato" @ref="resistenciaMagica1">@campeon1.ResistenciaMagica</p>
				<p class="dato" @ref="alcance1">@campeon1.Alcance</p>
				<p class="dato" @ref="velocidad1">@campeon1.Velocidad</p>
				<p class="dato" @ref="velocidadDeAtaque1">@campeon1.VelocidadDeAtaque</p>
			</div>
			<div class="estadisticas">
				<p class="stat">Vida</p>
				<p class="stat">Mana</p>
				<p class="stat">Daño</p>
				<p class="stat">Armadura</p>
				<p class="stat">Resistencia Mágica</p>
				<p class="stat">Alcance</p>
				<p class="stat">Velocidad</p>
				<p class="stat">Velocidad de Ataque</p>
			</div>
			<div class="datosCampeon">
				<p class="dato" @ref="vida2">@campeon2.Vida</p>
				<p class="dato" @ref="mana2">@campeon2.Mana</p>
				<p class="dato" @ref="dano2">@campeon2.Dano</p>
				<p class="dato" @ref="armadura2">@campeon2.Armadura</p>
				<p class="dato" @ref="resistenciaMagica2">@campeon2.ResistenciaMagica</p>
				<p class="dato" @ref="alcance2">@campeon2.Alcance</p>
				<p class="dato" @ref="velocidad2">@campeon2.Velocidad</p>
				<p class="dato" @ref="velocidadDeAtaque2">@campeon2.VelocidadDeAtaque</p>
			</div>
		</div>
		@if (ganador != null)
		{
			<div class="contenedorGanador" >
				<p class="ganadorTexto">El ganador es :</p>
				<p class="nombresConsultor">
					@ganador.Nombre
				</p>
				<button @onclick="Redirigir" class="botonImagenGanador"><img class="imagenesGanador" src="@ganador.ImagenSkin[0]" /></button>
						
			</div>
		}
		else
		{
			<div class="tonto">
				Estas comparando el mismo campeón... Y el ganador ERES TU
				<img src="./Recursos/imagenes/medalla.png" class="imagenTonto"/>
			</div>
		}
	}
	else
	{
		<h1 class="sinBusqueda">Selecciona un campeón y empieza la CONSUUULTA</h1>
	}
}
else
{
	<div id="app">
		<svg class="loading-progress">
			<circle r="40%" cx="50%" cy="50%" />
			<circle r="40%" cx="50%" cy="50%" />
		</svg>
	</div>
}


@code {
	private List<Campeones> personajes;
	private List<Estadisticas> estadisticas;
	private List<Union> campeones = new List<Union>();
	private string nombre1 = string.Empty;
	private string nombre2 = string.Empty;
	private Union campeon1;
	private Union campeon2;
	private bool vs;
	private IJSObjectReference module;
	private string ganadorVida = string.Empty;
	private string ganadorMana = string.Empty;
	private string ganadorDano = string.Empty;
	private string ganadorArmadura = string.Empty;
	private string ganadorResistenciaMagica = string.Empty;
	private string ganadorAlcance = string.Empty;
	private string ganadorVelocidad = string.Empty;
	private string ganadorVelocidadDeAtaque = string.Empty;
	private ElementReference vida1;
	private ElementReference vida2;
	private ElementReference mana1;
	private ElementReference mana2;
	private ElementReference dano1;
	private ElementReference dano2;
	private ElementReference armadura1;
	private ElementReference armadura2;
	private ElementReference resistenciaMagica1;
	private ElementReference resistenciaMagica2;
	private ElementReference alcance1;
	private ElementReference alcance2;
	private ElementReference velocidad1;
	private ElementReference velocidad2;
	private ElementReference velocidadDeAtaque1;
	private ElementReference velocidadDeAtaque2;
	private int contador1 = 0;
	private int contador2 = 0;
	private Union ganador;

	protected override async Task OnInitializedAsync()
	{
		estadisticas = await Http.GetFromJsonAsync<List<Estadisticas>>("apis/estadisticas.json");
		personajes = await Http.GetFromJsonAsync<List<Campeones>>("apis/campeones.json");
		foreach (var item in personajes)
		{
			foreach (var item2 in estadisticas)
			{
				if (item.Nombre == item2.Nombre.TrimStart(' ').ToUpper())
				{
					campeones.Add(new Union(item, item2));
				}
			}
		}
	}

	private async Task Remover1()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", vida1);
	}
	private async Task Remover2()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", vida2);
	}

	private async Task Remover3()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", mana1);
	}
	private async Task Remover4()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", mana2);
	}

	private async Task Remover5()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", dano1);
	}
	private async Task Remover6()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", dano2);
	}

	private async Task Remover7()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", armadura1);
	}
	private async Task Remover8()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", armadura2);
	}

	private async Task Remover9()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", resistenciaMagica1);
	}
	private async Task Remover10()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", resistenciaMagica2);
	}

	private async Task Remover11()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", alcance1);
	}
	private async Task Remover12()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", alcance2);
	}

	private async Task Remover13()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", velocidad1);
	}
	private async Task Remover14()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", velocidad2);
	}

	private async Task Remover15()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", velocidadDeAtaque1);
	}
	private async Task Remover16()
	{
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("remover", velocidadDeAtaque2);
	}

	private async Task AnalizarDatos()
	{
		vs = true;
		ganador = null;
		contador1 = 0;
		contador2 = 0;
		Console.WriteLine("CacaNula");
		campeon1 = campeones.First(x => x.Nombre.Equals(nombre1));
		campeon2 = campeones.First(x => x.Nombre.Equals(nombre2));
		ganadorVida = ConvertirNum(campeon1.Vida, campeon2.Vida);
		ganadorMana = ConvertirNum(campeon1.Mana, campeon2.Mana);
		ganadorDano = ConvertirNum(campeon1.Dano, campeon2.Dano);
		ganadorArmadura = ConvertirNum(campeon1.Armadura, campeon2.Armadura);
		ganadorResistenciaMagica = ConvertirNum(campeon1.ResistenciaMagica, campeon2.ResistenciaMagica);
		ganadorAlcance = ConvertirNum(campeon1.Alcance, campeon2.Alcance);
		ganadorVelocidad = ConvertirNum(campeon1.Velocidad, campeon2.Velocidad);
		ganadorVelocidadDeAtaque = ConvertirNum(campeon1.VelocidadDeAtaque, campeon2.VelocidadDeAtaque);
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Consultor.js");
		await module.InvokeVoidAsync("quitarClase");
		Comparar();
		Ganador();

	}
	private void Comparar()
	{
		if (ganadorVida.Equals(campeon1.Vida))
		{
			Remover1();
			contador1++;
		}
		else if (ganadorVida.Equals(campeon2.Vida))
		{
			contador2++;
			Remover2();
		}
		if (ganadorMana.Equals(campeon1.Mana))
		{
			contador1++;
			Remover3();

		}
		else if (ganadorMana.Equals(campeon2.Mana))
		{
			contador2++;
			Remover4();
		}
		if (ganadorDano.Equals(campeon1.Dano))
		{
			contador1++;
			Remover5();

		}
		else if (ganadorDano.Equals(campeon2.Dano))
		{
			contador2++;
			Remover6();
		}
		if (ganadorArmadura.Equals(campeon1.Armadura))
		{
			contador1++;
			Remover7();

		}
		else if (ganadorArmadura.Equals(campeon2.Armadura))
		{
			contador2++;
			Remover8();
		}
		if (ganadorResistenciaMagica.Equals(campeon1.ResistenciaMagica))
		{
			contador1++;
			Remover9();

		}
		else if (ganadorResistenciaMagica.Equals(campeon2.ResistenciaMagica))
		{
			contador2++;
			Remover10();
		}
		if (ganadorAlcance.Equals(campeon1.Alcance))
		{
			contador1++;
			Remover11();

		}
		else if (ganadorAlcance.Equals(campeon2.Alcance))
		{
			contador2++;
			Remover12();
		}
		if (ganadorVelocidad.Equals(campeon1.Velocidad))
		{
			contador1++;
			Remover13();

		}
		else if (ganadorVelocidad.Equals(campeon2.Velocidad))
		{
			contador2++;
			Remover14();
		}
		if (ganadorVelocidadDeAtaque.Equals(campeon1.VelocidadDeAtaque))
		{
			contador1++;
			Remover15();

		}
		else if (ganadorVelocidadDeAtaque.Equals(campeon2.VelocidadDeAtaque))
		{
			contador2++;
			Remover16();
		}
	}

	private void Ganador()
	{


		if(contador1 > contador2)
		{
			Console.WriteLine("Caca1");
			ganador = campeon1;
		}
		else if(contador2 >contador1)
		{
			Console.WriteLine("Caca2");
			ganador = campeon2;
		}

	}

	private string ConvertirNum(string dato, string dato2)
	{
		int a = int.Parse(dato);
		int b = int.Parse(dato2);
		int c = -1; //ganador
		if (a > b)
		{
			c = a;
		}
		else if (b > a)
		{
			c = b;
		}

		return c.ToString();
	}

	private void Redirigir()
	{
		NavigationManager.NavigateTo($"/campeon/{ganador.Nombre}");
	}



}
